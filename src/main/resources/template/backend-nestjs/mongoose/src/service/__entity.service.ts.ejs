<%
const { Case, typeDetect } = _;
const { _name , javadoc, fields, relationships } = _entity;
const relationshipType = {
    O2O: "one-to-one",
    O2M: "one-to-many",
    M2O: "many-to-one",
    M2M: "many-to-many"
};

-%>
import { Injectable } from '@nestjs/common';
import { <%-_entity.name.pascal()%><%-dtoSuffix%> } from './dto/<%-_entity.name.kebab()%>.dto';
import { <%-_entity.name.pascal()%>Mapper } from './mapper/<%-_entity.name.kebab()%>.mapper';
import { <%-_entity.name.pascal()%>Repository } from '../repository/<%-_entity.name.kebab()%>.repository';
import { AbstractBaseService } from './abstract.base.service';
import { <%-_entity.name.pascal()%><%-entitySuffix%> } from '../domain/<%-_entity.name.kebab()%>.entity';
<%-modules.search === "elasticsearch" ?
`import { ${_entity.name.pascal()}SearchRepository } from "../repository/search/${_entity.name.kebab()}.search.repository";` : ``%>


@Injectable()
export class <%-_entity.name.pascal()%>Service extends AbstractBaseService<<%-_entity.name.pascal()%><%-entitySuffix%>, <%-_entity.name.pascal()%><%-dtoSuffix%>> {

  constructor(
    protected _repository: <%-_entity.name.pascal()%>Repository,
    <%-modules.search === "elasticsearch" ? `private searchRepository: ${_entity.name.pascal()}SearchRepository<${_entity.name.pascal()}>${entitySuffix},` : ``%>
  ) {
    super(
      _repository,
      new <%-_entity.name.pascal()%>Mapper(<%-_entity.name.pascal()%><%-entitySuffix%>, <%-_entity.name.pascal()%><%-dtoSuffix%>),
      <%-modules.search === "elasticsearch" ? `searchRepository,` : ``%>
    );
  }
}
