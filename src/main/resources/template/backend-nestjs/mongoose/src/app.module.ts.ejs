<%
  const entitiesName = _entities.map((e)=> e.name )
-%>
// eslint-disable-next-line max-classes-per-file
import { Module } from "@nestjs/common";
import { AuthModule } from "./module/auth.module";
import { databaseConfig } from "./database.config";
import { config } from "./config";
import { ServeStaticModule } from "@nestjs/serve-static";
import { MongooseModule } from "@nestjs/mongoose";
<%-modules.cache === "redis" ? `import { InjectRedis, RedisModule } from "@liaoliaots/nestjs-redis";
import { CacheService } from "./index";` : ``%>
<%- entitiesName.map((name)=> `import { ${name.pascal()}Module } from "./module/${name.kebab()}.module";`).join(`\n`)%>



class GlobalInit {
  constructor(
    <%-modules.cache === "redis" ? `@InjectRedis() private readonly cache: CacheService,` : ``%>
  ) {
    <%-modules.cache === "redis" ?
    `this.cache.quick = async (key, callback) => {
      let result = await this.cache.get(key.toString()).then(r => JSON.parse(r));
      if (!result) {
        result = await callback();
        await this.cache.set(key, JSON.stringify(result));
      }
      return result;
    };` : ``%>
  }
}

@Module({
  imports: [
    MongooseModule.forRootAsync({ useFactory: databaseConfig }),
    ServeStaticModule.forRoot({
      rootPath: config.getClientPath(),
    }),
    <%-modules.cache === "redis" ?
    `RedisModule.forRootAsync({
      useFactory: () => ({
        config: [
          {
            host: getEnv("redis.host", "localhost"),
            port: parseInt(getEnv("redis.port", "6379"), 10),
          },
        ],
      }),
    }),` : ``%>
    AuthModule,
    <%- entitiesName.map((name)=> `${name.pascal()}Module,`).join(`
    `)%>
  ],
  controllers: [
  ],
  providers: [
    GlobalInit,
  ]
})
export class AppModule {}
