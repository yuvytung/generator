import { Module } from "@nestjs/common";
import { TypeOrmModule } from "@nestjs/typeorm";
import { AuthModule } from "./module/auth.module";
import { ormConfig } from "./database.config";
import { config } from "./config";
import { ServeStaticModule } from "@nestjs/serve-static";
<%-modules.cache === "redis" ? `import { InjectRedis, RedisModule } from "@liaoliaots/nestjs-redis";
import { CacheService } from "./index";` : ``%>

export class GlobalInit {
  constructor(
    <%-modules.cache === "redis" ? `@InjectRedis() private readonly cache: CacheService,` : ``%>
  ) {
    <%-modules.cache === "redis" ?
    `this.cache.quick = async (key, callback) => {
      let result = await this.cache.get(key.toString()).then(r => JSON.parse(r));
      if (!result) {
        result = await callback();
        this.cache.set(key, JSON.stringify(result));
      }
      return result;
    };` : ``%>
  }
}

@Module({
  imports: [
    TypeOrmModule.forRootAsync({ useFactory: ormConfig }),
    ServeStaticModule.forRoot({
      rootPath: config.getClientPath()
    }),
    <%-modules.cache === "redis" ?
    `RedisModule.forRootAsync({
      useFactory: () => ({
        config: [
          {
            host: "localhost",
            port: 6379
          }
        ]
      })
    }),` : ``%>
    AuthModule,
  ],
  controllers: [
  ],
  providers: [
    GlobalInit,
  ]
})
export class AppModule {}
