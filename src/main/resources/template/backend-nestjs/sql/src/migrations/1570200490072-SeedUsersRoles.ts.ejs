import { MigrationInterface, QueryRunner } from "typeorm";
import { User<%-entitySuffix%> } from "../domain/user.entity";
import { transformPassword } from "../security";
import { Authority } from "../domain/authority.entity";

export class SeedUsersRoles1570200490072 implements MigrationInterface {
  role1: Authority = { name: "ROLE_ADMIN" };

  role2: Authority = { name: "ROLE_USER" };

  user1: User<%-entitySuffix%> = {
    login: "system",
    password: "system",
    firstName: "System",
    lastName: "System",
    email: "system@localhost.it",
    imageUrl: "",
    activated: true,
    langKey: "en",
    _createdBy: "system",
    _updatedBy: "system",
  };

  user2: User<%-entitySuffix%> = {
    login: "anonymoususer",
    password: "anonymoususer",
    firstName: "Anonymous",
    lastName: "User",
    email: "anonymoususer@localhost.it",
    imageUrl: "",
    activated: true,
    langKey: "en",
    _createdBy: "system",
    _updatedBy: "system",
  };

  user3: User<%-entitySuffix%> = {
    login: "admin",
    password: "admin",
    firstName: "Administrator",
    lastName: "Administrator",
    email: "admin@localhost.it",
    imageUrl: "",
    activated: true,
    langKey: "en",
    _createdBy: "system",
    _updatedBy: "system",
  };

  user4: User<%-entitySuffix%> = {
    login: "user",
    password: "user",
    firstName: "User",
    lastName: "User",
    email: "user@localhost.it",
    imageUrl: "",
    activated: true,
    langKey: "en",
    _createdBy: "system",
    _updatedBy: "system",
  };

  // eslint-disable-next-line
  public async up(queryRunner: QueryRunner): Promise<any> {
    await queryRunner.connection.synchronize();
    const authorityRepository = queryRunner.connection.getRepository("<%-`${prefix}_`%>authority");

    const adminRole = await authorityRepository.save(this.role1);
    const userRole = await authorityRepository.save(this.role2);

    const userRepository = queryRunner.connection.getRepository("<%-`${prefix}_`%>user");

    this.user1.authorities = [adminRole, userRole];
    this.user3.authorities = [adminRole, userRole];
    this.user4.authorities = [userRole];

    await Promise.all(
      [this.user1, this.user2, this.user3, this.user4].map(u => transformPassword(u)),
    );

    await userRepository.save([this.user1, this.user2, this.user3, this.user4]);
  }

  // eslint-disable-next-line
  public async down(queryRunner: QueryRunner): Promise<any> {}
}
