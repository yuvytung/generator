// eslint-disable-next-line max-classes-per-file
import { Module } from "@nestjs/common";
import { AuthModule } from "./module/auth.module";
import { databaseConfig } from "./database.config";
import { config } from "./config";
import { ServeStaticModule } from "@nestjs/serve-static";
import { InjectRedis, RedisModule } from "@liaoliaots/nestjs-redis";
import { CacheService } from "./index";
import { MongooseModule } from "@nestjs/mongoose";

class GlobalInit {
  constructor(@InjectRedis() private readonly cache: CacheService) {
    this.cache.quick = async (key, callback) => {
      let result = await this.cache.get(key.toString()).then((r) => JSON.parse(r));
      if (!result) {
        result = await callback();
        await this.cache.set(key, JSON.stringify(result));
      }
      return result;
    };
  }
}

@Module({
  imports: [
    MongooseModule.forRootAsync({ useFactory: databaseConfig }),
    ServeStaticModule.forRoot({
      rootPath: config.getClientPath(),
    }),
    RedisModule.forRootAsync({
      useFactory: () => ({
        config: [
          {
            host: "localhost",
            port: 6379,
          },
        ],
      }),
    }),
    AuthModule,
  ],
  controllers: [],
  providers: [GlobalInit],
})
export class AppModule {}
