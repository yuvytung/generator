/**
 * A base mapper object.
 */
export class AbstractBaseMapper<E, D> {
  constructor(protected readonly Entity: any, protected readonly DTO: any) {}

  static copy(resource) {
    return JSON.parse(JSON.stringify(resource));
  }

  d2e(dto: D): E {
    if (!dto) {
      return;
    }
    const entity = new this.Entity();
    return Object.assign(entity, AbstractBaseMapper.copy(dto));
  }

  e2d(entity: E): D {
    if (!entity) {
      return;
    }
    const dto = new this.DTO();
    return Object.assign(dto, AbstractBaseMapper.copy(entity));
  }

  e2dList(entities: E[]): D[] {
    if (!entities) {
      return [];
    }
    return entities.map((entity) => this.e2d(entity));
  }

  d2eList(dtos: D[]): E[] {
    if (!dtos) {
      return [];
    }
    return dtos.map((dto) => this.d2e(dto));
  }
}
