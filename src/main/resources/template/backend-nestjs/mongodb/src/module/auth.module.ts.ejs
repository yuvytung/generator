import { Module } from "@nestjs/common";
import { AuthService } from "../service/auth.service";
import { UserModule } from "./user.module";
import { PassportModule } from "@nestjs/passport";
import { JwtModule } from "@nestjs/jwt";
import { JwtStrategy } from "../security/passport.jwt.strategy";
import { UserJWTController } from "../web/rest/user.jwt.controller";
import { config } from "../config";

import { PublicUserController } from "../web/rest/public.user.controller";
import { AccountController } from "../web/rest/account.controller";
import { MongooseModule } from "@nestjs/mongoose";
import { AuthorityRepository } from "../repository/authority.repository";
import { AuthoritySchema } from "../domain/authority.entity";
import { MongooseCollection } from "../domain/base/mongoose.collection";

@Module({
  imports: [
    MongooseModule.forFeature([{ name: MongooseCollection.Authority, schema: AuthoritySchema }]),
    UserModule,
    PassportModule,
    JwtModule.register({
      secret: new Buffer(
        getEnv("jhipster.security.authentication.jwt.base64-secret"),
        "base64",
      ).toString(),
      signOptions: { expiresIn: "300s" },
    }),
  ],
  controllers: [UserJWTController, PublicUserController, AccountController],
  providers: [AuthService, JwtStrategy, AuthorityRepository],
  exports: [AuthService],
})
export class AuthModule {}
