<%
const { Case, typeDetect } = _;
const { _name, name , javadoc, fields, relationships } = _entity;
const relationshipType = {
  O2O: "one-to-one",
  O2M: "one-to-many",
  M2O: "many-to-one",
  M2M: "many-to-many"
};
-%>
/* eslint-disable @typescript-eslint/no-unused-vars */
import { Entity, Column, JoinColumn, OneToOne, ManyToOne, OneToMany, ManyToMany, JoinTable } from 'typeorm';
import { BaseEntity } from './base/base.entity';

<%-Array.from(new Set(relationships
    .map(r => r.otherEntityName)
    .filter(v => v.lower() !== name.lower())))
  .map((otherEntityName)=>
`import { ${Case.pascal(otherEntityName)} } from './${Case.kebab(otherEntityName)}.entity';`)
.join(`\n`)
%>

/**
 * <%-name.pascal()%> entity.
 *
 * <%-javadoc?.replace(/\\n/g,`
 * `)%>
 */
@Entity('<%-_name.snake%>')
export class <%-name.pascal()%> extends BaseEntity {
  <%-
  fields?.map(field =>
  `/**
   * ${field.javadoc?.replace(/\\n/g,`
   * `) || field.fieldName}
   */
  @Column({
    name: "${field.fieldName.snake()}",
    ${field.fieldValidateRules?.includes('required') ? "nullable: false," : ""}
    ${field.fieldValidateRules?.includes('unique') ? "unique: true," : ""}
  })
  ${Case.camel(field.fieldName)}: ${typeDetect(field.fieldType)};`
  ).join(`

  `)
  %>

  <%-relationships?.map(relationship => {
    let propBuilder = '';
    if (database === "mysql" || database === "mariadb" || database === 'postgresql')
      if (relationshipType.O2O === relationship.relationshipType)
      propBuilder = `
  @OneToOne((type) => ${Case.pascal(relationship.otherEntityName)})
  @JoinColumn()
  `
      else if (relationshipType.M2O === relationship.relationshipType)
      propBuilder = `
  @ManyToOne((type) => ${Case.pascal(relationship.otherEntityName)})
  `
      else if (relationshipType.O2M === relationship.relationshipType)
      propBuilder = `
  @OneToMany((type) => ${Case.pascal(relationship.otherEntityName)}, (other) => other.${Case.camel(relationship.otherEntityRelationshipName)} )
  `
      else if (relationshipType.M2M === relationship.relationshipType && relationship.ownerSide)
      propBuilder = `
  @ManyToMany((type) => ${Case.pascal(relationship.otherEntityName)}, (other) => other.${Case.camel(relationship.otherEntityRelationshipName)}s )
  `
      else if (relationshipType.M2M === relationship.relationshipType && !relationship.ownerSide)
      propBuilder = `
  @ManyToMany((type) => ${Case.pascal(relationship.otherEntityName)}, (other) => other.${Case.camel(relationship.otherEntityRelationshipName)}s )
  @JoinTable({
    name: 'rel_${relationship.otherEntityRelationshipName.snake()}__${relationship.relationshipName.snake()}',
    joinColumn: { name: '${Case.snake(relationship.otherEntityRelationshipName)}_id', referencedColumnName: 'id' },
    inverseJoinColumn: { name: '${relationship.relationshipName.snake()}_id', referencedColumnName: 'id' },
  })
  `
    else if (database === 'mongodb') propBuilder = ``;

    if ((relationshipType.O2O === relationship.relationshipType)
      || (relationshipType.M2O === relationship.relationshipType))
      return propBuilder.concat(`${Case.camel(relationship.relationshipName)}: ${Case.pascal(relationship.otherEntityName)};`);
    else if ((relationshipType.O2M === relationship.relationshipType)
      || (relationshipType.M2M === relationship.relationshipType && relationship.ownerSide)
      || (relationshipType.M2M === relationship.relationshipType && !relationship.ownerSide)
    )
      return propBuilder.concat(`${Case.camel(relationship.relationshipName)}s: ${Case.pascal(relationship.otherEntityName)}[];`);
  }).join(``)%>

}
