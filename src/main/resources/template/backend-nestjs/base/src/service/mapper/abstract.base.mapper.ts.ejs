import { ClassConstructor, ClassTransformOptions, plainToInstance } from "class-transformer";
import { cloneDeep } from "lodash";

/**
 * A base mapper object.
 */
export class AbstractBaseMapper<E, D> {
  constructor(protected readonly Entity: any, protected readonly DTO: any) {}

  d2e(dto: D): E;
  d2e(dto: D[]): E[];
  d2e(dto: D | D[]): E | E[] {
    const result = [].concat(dto).map((d) => Object.assign(new this.Entity(), cloneDeep(d)));
    return Array.isArray(dto) ? result : [result[0]];
  }

  e2d(dto: E): D;
  e2d(dto: E[]): D[];
  e2d(entity: E | E[], { TargetClass, options }: TargetOptionsType<E> = {}): D | D[] {
    const result = [].concat(entity).map((e) => Object.assign(new this.DTO(), cloneDeep(e)));
    return plainToInstance<D, E>(TargetClass || this.DTO, result, {
      excludeExtraneousValues: true,
      ...options,
    });
  }
}

interface TargetOptionsType<T> {
  TargetClass?: ClassConstructor<T>;
  options?: ClassTransformOptions;
}
