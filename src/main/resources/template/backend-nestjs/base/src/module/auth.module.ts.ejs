import { Module } from "@nestjs/common";
import { AuthService } from "../service/auth.service";
import { UserModule } from "./user.module";
import { PassportModule } from "@nestjs/passport";
import { JwtModule } from "@nestjs/jwt";
import { JwtStrategy } from "../security/passport.jwt.strategy";
import { UserJWTController } from "../web/rest/user.jwt.controller";
import { TypeOrmModule } from "@nestjs/typeorm";

import { PublicUserController } from "../web/rest/public.user.controller";
import { AccountController } from "../web/rest/account.controller";
import { Authority<%-entitySuffix%> } from "../domain/authority.entity";

@Module({
  imports: [
    TypeOrmModule.forFeature([Authority<%-entitySuffix%>]),
    UserModule,
    PassportModule,
    JwtModule.registerAsync({
      useFactory: () => ({
        secret: new Buffer(
          getEnv("jhipster.security.authentication.jwt.base64-secret"),
          "base64",
        ).toString(),
        signOptions: { expiresIn: "300s" },
      }),
    }),
  ],
  controllers: [UserJWTController, PublicUserController, AccountController],
  providers: [AuthService, JwtStrategy],
  exports: [AuthService],
})
export class AuthModule {}
