<%
const builder = (arr) => arr.concat([[true, '']])
                .filter(([condition]) => condition)
                .map(([condition, value]) => value)
                .join('\n'),
addImport = builder([
    [entityType === "typeorm",             `import { TypeOrmModule } from "@nestjs/typeorm";`],
    [entityType === "typeorm",             `import { Authority${entitySuffix} } from "../domain/authority.entity";`],
    [entityType === "mongoose",            `import { MongooseModule } from "@nestjs/mongoose";`],
    [entityType === "mongoose",            `import { Authority${entitySuffix}Repository } from "../repository/authority.repository";`],
    [entityType === "mongoose",            `import { Authority${entitySuffix}Schema } from "../domain/authority.entity";`],
    [entityType === "mongoose",            `import { MongooseCollection } from "../domain/base/mongoose.collection";`]
  ]),
addModuleImports = builder([
    [entityType === "mongoose",             `MongooseModule.forFeature([{ name: MongooseCollection.Authority${entitySuffix}, schema: Authority${entitySuffix}Schema }]),`],
    [entityType === "typeorm",              `TypeOrmModule.forFeature([Authority${entitySuffix}]),`]
  ]),
addModuleProviders = builder([
    [entityType === "mongoose",             `Authority${entitySuffix}Repository,`]
]);
-%>



import { Module } from "@nestjs/common";
import { AuthService } from "../service/auth.service";
import { UserModule } from "./user.module";
import { PassportModule } from "@nestjs/passport";
import { JwtModule } from "@nestjs/jwt";
import { JwtStrategy } from "../security/passport.jwt.strategy";
import { UserJWTController } from "../web/rest/user.jwt.controller";

import { PublicUserController } from "../web/rest/public.user.controller";
import { AccountController } from "../web/rest/account.controller";
<%-addImport%>

@Module({
  imports: [
    <%-addModuleImports%>
    UserModule,
    PassportModule,
    JwtModule.registerAsync({
      useFactory: () => ({
        secret: Buffer.from(
          getEnv("jhipster.security.authentication.jwt.base64-secret"),
          "base64",
        ).toString(),
        signOptions: { expiresIn: "300s" },
      }),
    }),
  ],
  controllers: [UserJWTController, PublicUserController, AccountController],
  providers: [
    <%-addModuleProviders%>
    AuthService,
    JwtStrategy
  ],
  exports: [AuthService],
})
export class AuthModule {}
