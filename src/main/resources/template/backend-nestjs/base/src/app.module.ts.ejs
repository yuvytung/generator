<%
var _entities;
_entities = _entities || [];

const builder = (arr) => arr.concat([[true, '']])
  .filter(([condition]) => condition)
  .map(([condition, value]) => value)
  .join('\n'),
entitiesName = _entities?.map((e)=> e.name ) || []
addImport = builder([
    [entityType === "mongoose",            `import { MongooseModule } from "@nestjs/mongoose";`],
    [modules.cache === "redis",            `import { InjectRedis, RedisModule } from "@liaoliaots/nestjs-redis";`],
    [modules.cache === "redis",            `import { CacheService } from "./index";`],
    [true,                                 `import { PrometheusModule } from "@willsoto/nestjs-prometheus";`]
  ]),
addGlobalInitConstructorParam = builder([
    [modules.cache === "redis",            `@InjectRedis() private readonly cache: CacheService,`]
  ]),
addGlobalInitConstructorBody = builder([
    [
      modules.cache === "redis",
      `this.cache.quick = async (key, callback) => {
        let result = await this.cache.get(key.toString()).then(r => JSON.parse(r));
        if (!result) {
          result = await callback();
          void this.cache.set(key, JSON.stringify(result));
        }
        return result;
      };`
    ]
  ]),
addModuleImports = builder([
    [
      modules.cache === "redis",
      `RedisModule.forRootAsync({
        useFactory: () => ({
          config: [
            {
              host: getEnv("redis.host", "localhost"),
              port: getEnv("redis.port", "6379"),
            },
          ],
        }),
      }),`
    ],
    [
      true,
      `PrometheusModule.register({
        path: "/management/prometheus",
      }),`
    ]
  ]);
-%>
// eslint-disable-next-line max-classes-per-file
import { Module } from "@nestjs/common";
import { AuthModule } from "./module/auth.module";
import { databaseConfig } from "./database.config";
import { config } from "./config";
import { ServeStaticModule } from "@nestjs/serve-static";
<%-addImport%>
<%-entitiesName.map((name)=> `import { ${name.pascal()}Module } from "./module/${name.kebab()}.module";`).join(`\n`)%>


class GlobalInit {
  constructor(
    <%-addGlobalInitConstructorParam%>
  ) {
    <%-addGlobalInitConstructorBody%>
  }
}

@Module({
  imports: [
    AuthModule,
    MongooseModule.forRootAsync({ useFactory: databaseConfig }),
    ServeStaticModule.forRoot({
      rootPath: config.getClientPath(),
    }),
    <%-addModuleImports%>
    <%-entitiesName.map((name)=> `${name.pascal()}Module`).join(',')%>
  ],
  controllers: [
  ],
  providers: [
    GlobalInit,
  ]
})
export class AppModule {}
