import { LoggerService } from "@nestjs/common";
import log4js from "log4js";
import chalk from "chalk";

const log4jsConfig = () => {
  log4js.configure({
    appenders: {
      console: {
        type: "console",
        layout: {
          type: "pattern",
          pattern: `${chalk.gray("%d{yyyy/MM/dd hh:mm:ss.SSS}")} ${chalk.bold(
            "%[%5.-5p%]",
          )}%-0.-20c%-40.-50x{fileName} ${chalk.hex("#FFC16BFF").italic("%m")}`,
          tokens: {
            fileName: (logEvent) =>
              chalk.italic(
                logEvent.fileName
                  .replace(`${process.env.PWD}/`, "")
                  .replace(/(.js|.ts)$/g, "")
                  .concat(`:${logEvent.lineNumber}`)
                  .replace(/(src|dist)\/logger.config:\d*/, "NestJS"),
              ),
          },
        },
      },
    },
    categories: {
      default: {
        appenders: ["console"],
        level: "debug",
        enableCallStack: true,
      },
    },
  });
  global.log = log4js.getLogger(" ");
};
log4jsConfig();

export class LoggerConfig implements LoggerService {
  logger = log4js.getLogger(" ");
  constructor({ level }: any = {}) {
    if (level) {
      this.logger.level = level;
    }
  }

  /**
   * Write a 'log' level log.
   */
  log(message: any, ...optionalParams: any[]) {
    this.logger.info(message, ...optionalParams);
  }

  /**
   * Write an 'error' level log.
   */
  error(message: any, ...optionalParams: any[]) {
    this.logger.error(message, ...optionalParams);
  }

  /**
   * Write a 'warn' level log.
   */
  warn(message: any, ...optionalParams: any[]) {
    this.logger.warn(message, ...optionalParams);
  }

  /**
   * Write a 'debug' level log.
   */
  debug(message: any, ...optionalParams: any[]) {
    this.logger.debug(message, ...optionalParams);
  }

  /**
   * Write a 'verbose' level log.
   */
  verbose(message: any, ...optionalParams: any[]) {
    this.logger.trace(message, ...optionalParams);
  }

  /**
   * Write a 'info' level log.
   */
  info(message: any, ...optionalParams: any[]) {
    this.logger.info(message, ...optionalParams);
  }
}
