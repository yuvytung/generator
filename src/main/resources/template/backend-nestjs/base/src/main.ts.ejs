/* eslint-disable @typescript-eslint/no-floating-promises */

import { LoggerConfig } from "./logger.config";
import { config as configEnv } from "dotenv";
import { NestFactory } from "@nestjs/core";
import { AppModule } from "./app.module";
import { setupSwagger } from "./swagger";
import { config } from "./config";
import { BadRequestException, ValidationPipe } from "@nestjs/common";
import * as fs from "fs";

import { loadCloudConfig, registerAsEurekaService } from "./eurka.config";

configEnv({ path: ".env" });
const port = process.env.NODE_SERVER_PORT || config.get("server.port");

async function bootstrap(): Promise<void> {
  await loadCloudConfig();
  registerAsEurekaService();
  const appOptions = { cors: true, logger: new LoggerConfig() };
  const app = await NestFactory.create(AppModule, appOptions);
  app.useGlobalPipes(
    new ValidationPipe({
      exceptionFactory: (): BadRequestException => new BadRequestException("Validation error"),
    }),
  );

  const staticClientPath = config.getClientPath();
  if (fs.existsSync(staticClientPath)) {
    log.info(`Serving static client resources on ${staticClientPath}`);
  } else {
    log.info("No client it has been found");
  }

  setupSwagger(app);

  await app.listen(port);
}

bootstrap().then(() => log.info(`Application listening on port ${port}`));
