import { Injectable } from "@nestjs/common";
import { InjectRepository } from "@nestjs/typeorm";
import { User<%-entitySuffix%> } from "../domain/user.entity";
import { User<%-dtoSuffix%> } from "./dto/user.dto";
import { UserMapper } from "./mapper/user.mapper";
import { UserRepository } from "../repository/user.repository";
import { FindManyOptions, FindOneOptions } from "typeorm";
import { transformPassword } from "../security";

@Injectable()
export class UserService {
  constructor(@InjectRepository(UserRepository) private userRepository: UserRepository) {}

  async findById(id: number): Promise<User<%-dtoSuffix%> | undefined> {
    const result = await this.userRepository.findOne(id);
    return UserMapper.fromEntityToDTO(this.flatAuthorities(result));
  }

  async findByFields(options: FindOneOptions<User<%-dtoSuffix%>>): Promise<User<%-dtoSuffix%> | undefined> {
    options.relations = ["authorities"];
    const result = await this.userRepository.findOne(options);
    return UserMapper.fromEntityToDTO(this.flatAuthorities(result));
  }

  async find(options: FindManyOptions<User<%-dtoSuffix%>>): Promise<User<%-dtoSuffix%> | undefined> {
    const result = await this.userRepository.findOne(options);
    return UserMapper.fromEntityToDTO(this.flatAuthorities(result));
  }

  async findAndCount(options: FindManyOptions<User<%-dtoSuffix%>>): Promise<[User<%-dtoSuffix%>[], number]> {
    options.relations = ["authorities"];
    const resultList = await this.userRepository.findAndCount(options);
    const users<%-dtoSuffix%>: User<%-dtoSuffix%>[] = [];
    if (resultList && resultList[0]) {
      resultList[0].forEach(user =>
        users<%-dtoSuffix%>.push(UserMapper.fromEntityToDTO(this.flatAuthorities(user))),
      );
      resultList[0] = users<%-dtoSuffix%>;
    }
    return resultList;
  }

  async save(
    user<%-dtoSuffix%>: User<%-dtoSuffix%>,
    creator?: string,
    updatePassword = false,
  ): Promise<User<%-dtoSuffix%> | undefined> {
    const user = this.convertInAuthorities(UserMapper.fromDTOtoEntity(user<%-dtoSuffix%>));
    if (updatePassword) {
      await transformPassword(user);
    }
    if (creator) {
      if (!user.createdBy) {
        user.createdBy = creator;
      }
      user.lastModifiedBy = creator;
    }
    const result = await this.userRepository.save(user);
    return UserMapper.fromEntityToDTO(this.flatAuthorities(result));
  }

  async update(user<%-dtoSuffix%>: User<%-dtoSuffix%>, updater?: string): Promise<User<%-dtoSuffix%> | undefined> {
    return this.save(user<%-dtoSuffix%>, updater);
  }

  async delete(user<%-dtoSuffix%>: User<%-dtoSuffix%>): Promise<User<%-dtoSuffix%> | undefined> {
    const user = UserMapper.fromDTOtoEntity(user<%-dtoSuffix%>);
    const result = await this.userRepository.remove(user);
    return UserMapper.fromEntityToDTO(result);
  }

  private flatAuthorities(user: any): User<%-entitySuffix%> {
    if (user && user.authorities) {
      const authorities: string[] = [];
      user.authorities.forEach(authority => authorities.push(authority.name));
      user.authorities = authorities;
    }
    return user;
  }

  private convertInAuthorities(user: any): User<%-entitySuffix%> {
    if (user && user.authorities) {
      const authorities: any[] = [];
      user.authorities.forEach(authority => authorities.push({ name: authority }));
      user.authorities = authorities;
    }
    return user;
  }
}
