<%
const Entity = _entity.name.pascal().concat();
const EntityDTO = _entity.name.pascal().concat(dtoSuffix);
const EntityRest = _entity.name.pascal().concat("Rest");
const EntityService = _entity.name.pascal().concat("Service");
const EntityMapper = _entity.name.pascal().concat("Mapper");
const EntityControllerImpl = _entity.name.pascal().concat("ControllerImpl");
-%>

import { Inject, Injectable, Scope } from "@nestjs/common";
import { Request } from "../../common/interfaces/Request";
import { <%-EntityRest%> } from "../rest";
import { <%-EntityService%> } from "../../service";
import { <%-Entity%> } from "../../domain";
import { BaseEntityManagementController } from "../../common/bases";
import { <%-EntityDTO%> } from "../../dto";
import { <%-EntityMapper%> } from "../../mapper";
import { EntityManagementController } from "../rest";
import { REQUEST } from "@nestjs/core";

@Injectable({ scope: Scope.REQUEST })
export class <%-EntityControllerImpl%>
  extends BaseEntityManagementController<<%-Entity%>, <%-EntityDTO%>>
  implements <%-EntityRest%>, EntityManagementController<<%-EntityDTO%>>
{
  protected mapper = new <%-EntityMapper%>(<%-Entity%>, <%-EntityDTO%>);
  constructor(
    @Inject(REQUEST)
    protected readonly request: Request,
    protected readonly service: <%-EntityService%>,
  ) {
    super();
  }
}
