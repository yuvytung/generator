import { ApiProperty } from "@nestjs/swagger";
import { IsString, IsEmail } from "class-validator";
import { BaseDTO } from "../common/bases";
import { Exclude, Expose } from "class-transformer";

/**
 * An User DTO object.
 */
export class UserDTO extends BaseDTO {
  @ApiProperty({ uniqueItems: true, example: "myuser", description: "User login" })
  @IsString()
  @Expose()
  login: string;

  @ApiProperty({ example: "MyUser", description: "User first name", required: false })
  @Expose()
  firstName?: string;

  @ApiProperty({ example: "MyUser", description: "User last name", required: false })
  @Expose()
  lastName?: string;

  @ApiProperty({ example: "myuser@localhost.it", description: "User email" })
  @IsEmail()
  @Expose()
  email: string;

  @ApiProperty({ example: "true", description: "User activation", required: false })
  @Expose()
  activated?: boolean;

  @ApiProperty({ example: "en", description: "User language", required: false })
  @Expose()
  langKey?: string;

  @ApiProperty({
    isArray: true,
    enum: ["ROLE_USER", "ROLE_ADMIN", "ROLE_ANONYMOUS"],
    description: "Array of permissions",
    required: false,
  })
  @Expose()
  authorities?: any[];

  @Exclude()
  @ApiProperty({ example: "myuser", description: "User password" })
  password: string;

  @ApiProperty({ example: "http://my-image-url", description: "Image url", required: false })
  @Expose()
  imageUrl?: string;

  @Expose()
  activationKey?: string;

  @Expose()
  resetKey?: string;

  @Expose()
  resetDate?: Date;

  @Expose()
  createdBy?: string;
  @Expose()
  createdDate?: Date;
  @Expose()
  lastModifiedBy?: string;
  @Expose()
  lastModifiedDate?: Date;
}
