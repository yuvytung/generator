import { HttpException, HttpStatus, Injectable } from "@nestjs/common";
import { JwtService } from "@nestjs/jwt";
import { UserLoginDTO, UserDTO } from "../../dto";
import { Payload } from "../../internal/security/Payload";
import * as bcrypt from "bcrypt";
import { AuthorityRepository } from "../../repository";
import { ObjectId } from "mongodb";
import { FilterQuery, QueryOptions } from "mongoose";
import { Authority } from "../../domain";
import { BaseService } from "../../common/bases";
import { Request } from "../../common/interfaces/Request";
import { AuthService, UserService } from "../";

@Injectable()
export class AuthServiceImpl extends BaseService<Authority> implements AuthService {
  protected request: Request;
  constructor(
    // protected readonly request: Request,
    protected readonly repository: AuthorityRepository,
    private readonly jwtService: JwtService,
    private readonly userService: UserService,
  ) {
    super();
  }

  async login(userLogin: UserLoginDTO): Promise<any> {
    const loginUserName = userLogin.username;
    const loginPassword = userLogin.password;

    const userFind = await this.userService.findByFields({ login: loginUserName });
    const validPassword = !!userFind && (await bcrypt.compare(loginPassword, userFind.password));
    if (!userFind || !validPassword) {
      throw new HttpException("Invalid login name or password!", HttpStatus.BAD_REQUEST);
    }

    if (userFind && !userFind.activated) {
      throw new HttpException("Your account is not been activated!", HttpStatus.BAD_REQUEST);
    }

    const user = await this.findUserWithAuthById(userFind._id);

    const payload: Payload = {
      id: user._id.toString(),
      username: user.login,
      authorities: user.authorities,
    };

    /* eslint-disable */
    return {
      id_token: this.jwtService.sign(payload),
    };
  }

  async validateUser(payload: Payload): Promise<UserDTO | undefined> {
    return await this.findUserWithAuthById(payload.id);
  }

  async findUserWithAuthById(userId: string | ObjectId): Promise<UserDTO | undefined> {
    return await this.userService.findByFields({ _id: userId });
  }

  async getAccount(userId: string): Promise<UserDTO | undefined> {
    const userDTO: UserDTO = await this.findUserWithAuthById(userId);
    if (!userDTO) {
      return;
    }
    return userDTO;
  }

  async changePassword(
    userLogin: string,
    currentClearTextPassword: string,
    newPassword: string,
  ): Promise<void> {
    const userFind: UserDTO = await this.userService.findByFields({ login: userLogin });
    if (!userFind) {
      throw new HttpException("Invalid login name!", HttpStatus.BAD_REQUEST);
    }

    if (!(await bcrypt.compare(currentClearTextPassword, userFind.password))) {
      throw new HttpException("Invalid password!", HttpStatus.BAD_REQUEST);
    }
    userFind.password = newPassword;
    await this.userService.save(userFind, userLogin, true);
  }

  async registerNewUser(newUser: UserDTO): Promise<UserDTO> {
    let userFind: UserDTO = await this.userService.findByFields({
      login: newUser.login,
    });
    if (userFind) {
      throw new HttpException("Login name already used!", HttpStatus.BAD_REQUEST);
    }
    userFind = await this.userService.findByFields({ email: newUser.email });
    if (userFind) {
      throw new HttpException("Email is already in use!", HttpStatus.BAD_REQUEST);
    }
    newUser.authorities = ["ROLE_USER"];
    return await this.userService.save(newUser, newUser.login, true);
  }

  async updateUserSettings(userLogin: string, newUserInfo: UserDTO): Promise<UserDTO> {
    const userFind: UserDTO = await this.userService.findByFields({ login: userLogin });
    if (!userFind) {
      throw new HttpException("Invalid login name!", HttpStatus.BAD_REQUEST);
    }
    const userFindEmail: UserDTO = await this.userService.findByFields({
      email: newUserInfo.email,
    });
    if (userFindEmail && newUserInfo.email !== userFind.email) {
      throw new HttpException("Email is already in use!", HttpStatus.BAD_REQUEST);
    }

    userFind.firstName = newUserInfo.firstName;
    userFind.lastName = newUserInfo.lastName;
    userFind.email = newUserInfo.email;
    userFind.langKey = newUserInfo.langKey;
    return await this.userService.save(userFind, userLogin);
  }

  async getAllUsers(
    filter: FilterQuery<Authority>,
    options?: QueryOptions<Authority> | null | undefined,
  ): Promise<[UserDTO[], number]> {
    return await this.userService.findAndCount(filter, { ...options, populate: ["authorities"] });
  }
}

export default { provide: AuthService, useClass: AuthServiceImpl };
