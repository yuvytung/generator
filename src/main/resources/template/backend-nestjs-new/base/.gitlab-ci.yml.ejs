stages:
  - build
  - test
  - deploy

variables:
  AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
  AWS_ROOT_ACCOUNT: $AWS_ROOT_ACCOUNT
  AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
  AWS_REGION: $AWS_REGION

.base:
  script:
    - echo "Creating"

build:
  stage: build
  image: docker:stable
  tags:
    - catiny
  services:
    - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
    ECR_IMAGE_REPOSITORY: "$AWS_ROOT_ACCOUNT.dkr.ecr.$AWS_REGION.amazonaws.com"
    IMAGE_TAG: "catiny backend>:latest"
  extends: .base
  before_script:
    - apk add --no-cache curl bash py3-pip git
    - python3 -m pip install awscli
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set region $AWS_REGION
    - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_IMAGE_REPOSITORY
  script:
    - docker build -t $IMAGE_TAG .
    - docker tag $IMAGE_TAG $ECR_IMAGE_REPOSITORY/$IMAGE_TAG
    - docker push $ECR_IMAGE_REPOSITORY/$IMAGE_TAG

deploy:
  stage: deploy
  image: docker:stable
  tags:
    - catiny
  services:
    - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
    GIT_COMMIT: $CI_COMMIT_SHA
    GIT_VERSION: $CI_COMMIT_SHORT_SHA
    GIT_BRANCH: $CI_COMMIT_REF_NAME
    DOCKER_TLS_CERTDIR: ""
    ECR_IMAGE_REPOSITORY: "$AWS_ROOT_ACCOUNT.dkr.ecr.$AWS_REGION.amazonaws.com"
    IMAGE_TAG: "catinyskillmapservice:latest"
  extends: .base
  before_script:
    - apk add --no-cache curl bash py3-pip git
    - python3 -m pip install awscli
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set region $AWS_REGION
    - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_IMAGE_REPOSITORY
  script:
    - docker build -t $IMAGE_TAG .
    - docker tag $IMAGE_TAG $ECR_IMAGE_REPOSITORY/$IMAGE_TAG
    - docker push $ECR_IMAGE_REPOSITORY/$IMAGE_TAG
#
#unit-test-job:   # This job runs in the test stage.
#  stage: test    # It only starts when the job in the build stage completes successfully.
#  script:
#    - echo "Running unit tests... This will take about 60 seconds."
#    - sleep 60
#    - echo "Code coverage is 90%"
#
#lint-test-job:   # This job also runs in the test stage.
#  stage: test    # It can run at the same time as unit-test-job (in parallel).
#  script:
#    - echo "Linting code... This will take about 10 seconds."
#    - sleep 10
#    - echo "No lint issues found."
#
#deploy-job:      # This job runs in the deploy stage.
#  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
#  environment: production
#  script:
#    - echo "Deploying application..."
#    - echo "Application successfully deployed."
